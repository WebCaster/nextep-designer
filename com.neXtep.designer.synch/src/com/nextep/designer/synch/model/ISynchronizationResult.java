/*******************************************************************************
 * Copyright (c) 2011 neXtep Software and contributors.
 * All rights reserved.
 *
 * This file is part of neXtep designer.
 *
 * NeXtep designer is free software: you can redistribute it 
 * and/or modify it under the terms of the GNU General Public 
 * License as published by the Free Software Foundation, either 
 * version 3 of the License, or any later version.
 *
 * NeXtep designer is distributed in the hope that it will be 
 * useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contributors:
 *     neXtep Softwares - initial API and implementation
 *******************************************************************************/
package com.nextep.designer.synch.model;

import java.util.Collection;
import com.nextep.datadesigner.model.IReference;
import com.nextep.datadesigner.model.IReferenceable;
import com.nextep.datadesigner.sqlgen.model.ISQLScript;
import com.nextep.designer.core.model.IConnection;
import com.nextep.designer.sqlgen.model.IGenerationResult;
import com.nextep.designer.synch.services.ISynchronizationService;
import com.nextep.designer.vcs.model.ComparisonScope;
import com.nextep.designer.vcs.model.IComparisonItem;

/**
 * A synchronization result is literally the result of a synchronization between the neXtep
 * repository and a target database. Implementations of this interface can "hold" the data of a
 * synchronization.
 * 
 * @author Christophe Fondacci
 */
public interface ISynchronizationResult {

	/**
	 * Retrieves the original source elements which had been used to initiate this synchronization
	 * 
	 * @return the collection of original source elements for this comparison
	 */
	Collection<? extends IReferenceable> getSourceElements();

	/**
	 * Retrieves the original target elements which had been used to initiate this synchronization
	 * 
	 * @return the collection of original target elements for this comparison
	 */
	Collection<? extends IReferenceable> getTargetElements();

	/**
	 * Retrieves the comparison result of the items in this synchronization.
	 * 
	 * @return a collection of {@link IComparisonItem} containing the comparison information for
	 *         this synchronization
	 */
	Collection<IComparisonItem> getComparedItems();

	/**
	 * Retrieves the comparison item associated with the specified reference
	 * 
	 * @param r reference to retrieve the {@link IComparisonItem} for
	 * @return the corresponding {@link IComparisonItem}, when the specified {@link IReference} is
	 *         part of the synchronization, else <code>null</code>
	 */
	IComparisonItem getComparisonItemFor(IReference r);

	/**
	 * Retrieves the connection which had been used to perform this comparison
	 * 
	 * @return the {@link IConnection} database connection of this synchronization
	 */
	IConnection getConnection();

	/**
	 * Defines the SQL generation resulting of the generation of the compared elements according to
	 * the selected proposal.
	 * 
	 * @param generationResult a {@link IGenerationResult} corresponding to the generation of the
	 *        compared elements
	 */
	void setGenerationResult(IGenerationResult generationResult);

	/**
	 * Retrieves the generation script for this synchronization.
	 * 
	 * @return the latest generated script or <code>null</code> if no SQL generation has yet been
	 *         performed against this synchronization
	 */
	ISQLScript getGeneratedScript();

	/**
	 * Retrieves the generation result of the last generation. This result may not correspond to the
	 * current state of the compared elements. The result may be regenerated by calling
	 * {@link ISynchronizationService#buildScript(ISynchronizationResult)}
	 * 
	 * @return the last generated result
	 */
	IGenerationResult getGenerationResult();

	/**
	 * Retrieves the current {@link ComparisonScope} for this synchronization. Note that a
	 * synchronization scope may be changed by calling
	 * {@link ISynchronizationService#changeSynchronizationScope(ComparisonScope, ISynchronizationResult, org.eclipse.core.runtime.IProgressMonitor)}
	 * .
	 * 
	 * @return the comparison scope used for this synchronization
	 */
	ComparisonScope getComparisonScope();

	/**
	 * Informs whether this synchronization result is in a <i>dirty</i> state. The generation result
	 * is dirty when a change has been made to the selection of items to generate but the resulting
	 * SQL script has not been yet regenerated.
	 * 
	 * @return <code>true</code> when the resulting SQL script needs to be regenerated, or
	 *         <code>false</code> when it is synched.
	 */
	boolean isDirty();

	/**
	 * Sets the dirty state of this generation result.
	 * 
	 * @param dirty <code>true</code> to indicate that the resulting SQL script needs to be
	 *        regenerated, or <code>false</code> when the current synchronization selection is
	 *        synched with the SQL script contents
	 */
	void setDirty(boolean dirty);

	/**
	 * Sets this synchronization result as a result of a data synchronization. A data
	 * synchronization may impact the way differences are pushed to the database, or how information
	 * is imported into the repository in reverse mode.<br>
	 * Note that the data synchronization flag is false by default, unless set explicitly using this
	 * method.
	 * 
	 * @param dataSynchro <code>true</code> for a data synchro, else <code>false</code>.
	 */
	void setDataSynchronization(boolean dataSynchro);

	/**
	 * Indicates whether this element is a result of a data synchronization. By default, every
	 * synchronization result will return <code>false</code> unless this flag is set explicitly by
	 * calling {@link ISynchronizationResult#setDataSynchronization(boolean)}
	 * 
	 * @return <code>true</code> if this instance is a result of a data synchronization, else
	 *         <code>false</code>
	 */
	boolean isDataSynchronization();

}
