/*******************************************************************************
 * Copyright (c) 2011 neXtep Software and contributors.
 * All rights reserved.
 *
 * This file is part of neXtep designer.
 *
 * NeXtep designer is free software: you can redistribute it 
 * and/or modify it under the terms of the GNU General Public 
 * License as published by the Free Software Foundation, either 
 * version 3 of the License, or any later version.
 *
 * NeXtep designer is distributed in the hope that it will be 
 * useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contributors:
 *     neXtep Softwares - initial API and implementation
 *******************************************************************************/
package com.nextep.designer.dbgm.ui.controllers;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.nextep.datadesigner.dbgm.gui.TableEditorGUI;
import com.nextep.datadesigner.dbgm.gui.navigators.TableNavigator;
import com.nextep.datadesigner.dbgm.model.IBasicTable;
import com.nextep.datadesigner.gui.model.IDisplayConnector;
import com.nextep.datadesigner.gui.model.INavigatorConnector;
import com.nextep.datadesigner.model.ChangeEvent;
import com.nextep.datadesigner.vcs.impl.ImportPolicyAddOnly;
import com.nextep.designer.core.CorePlugin;
import com.nextep.designer.dbgm.ui.rcp.TypedFormRCPEditor;
import com.nextep.designer.ui.model.ITypedObjectUIController;
import com.nextep.designer.ui.model.base.AbstractUIController;
import com.nextep.designer.vcs.model.IVersionContainer;
import com.nextep.designer.vcs.model.IVersionable;
import com.nextep.designer.vcs.model.VersionableFactory;

/**
 * Controller for BasicTable. The controller manages the "glue" between the GUI and the model and
 * dispatches data persistence operations
 * 
 * @author Christophe Fondacci
 */
public class TableUIController extends AbstractUIController implements ITypedObjectUIController {

	private static final Log log = LogFactory.getLog(TableUIController.class);
	private static TableUIController instance = null;

	public TableUIController() {
		super();
		addSaveEvent(ChangeEvent.MODEL_CHANGED);
		addSaveEvent(ChangeEvent.COLUMN_REMOVED);
		addSaveEvent(ChangeEvent.COLUMN_ADDED);
		addSaveEvent(ChangeEvent.CONSTRAINT_REMOVED);
		addSaveEvent(ChangeEvent.CONSTRAINT_ADDED);
	}

	public static TableUIController getInstance() {
		if (instance == null) {
			instance = new TableUIController();
		}
		return instance;
	}

	/**
	 * @see com.nextep.datadesigner.ctrl.IDatabaseObjectController#initializeEditor(com.nextep.datadesigner.gui.model.IPluggableGUI,
	 *      com.nextep.datadesigner.dbgm.model.IDatabaseObject)
	 */
	public IDisplayConnector initializeEditor(Object content) {
		return new TableEditorGUI((IBasicTable) content, this);
	}

	/**
	 * @see com.nextep.datadesigner.ctrl.IDatabaseObjectController#initializeProperty(com.nextep.datadesigner.gui.model.IPluggableGUI,
	 *      com.nextep.datadesigner.dbgm.model.IDatabaseObject)
	 */
	public IDisplayConnector initializeProperty(Object content) {
		return null;
	}

	/**
	 * @see com.nextep.datadesigner.ctrl.IDatabaseObjectController#initilizeGraphical(com.nextep.datadesigner.gui.model.IPluggableGUI,
	 *      com.nextep.datadesigner.dbgm.model.IDatabaseObject)
	 */
	public IDisplayConnector initializeGraphical(Object content) {
		// return new TableGraphConnector((IDiagramItem)content,this);
		return null;
	}

	/**
	 * @see com.nextep.designer.ui.model.ITypedObjectUIController#newInstance(java.lang.Object)
	 */
	public Object newInstance(Object parent) {
		// IActivity activity =
		// (IActivity)GUIControllerFactory.getController(GUI.ACTIVITY).invoke(null);
		// if(activity==null) {
		// log.info("Aborting table creation since activity selection has been aborted.");
		// return null;
		// }
		IVersionContainer parentContainer = (IVersionContainer) parent;

		log.info("Adding new table in container <"
				+ (parentContainer == null ? "None" : parentContainer.getName()) + ">...");
		IVersionable<IBasicTable> v = (IVersionable<IBasicTable>) VersionableFactory
				.createVersionable(IBasicTable.class);
		v.setName(getAvailableName(v.getType()));
		CorePlugin.getIdentifiableDao().save(v);
		v.setContainer(parentContainer);
		// newWizardEdition("Table creation...",
		// UIControllerFactory.getController(IElementType.getInstance("TABLE"))
		// .initializeEditor(v));
		// v.setDescription("Generated by neXtep designer");
		// VersionedTable t = new VersionedTable("NEW_TABLE","New table description",activity);

		// The parent container will trigger a save, so we only add the versionable
		// and our save listeners will manage persistency
		if (parentContainer != null) {
			parentContainer.addVersionable(v, new ImportPolicyAddOnly());
		} else {
			// Manually saving table which is yet orphaned
			CorePlugin.getIdentifiableDao().save(v);
			// Manually Saving parent container since no cascading
			// IdentifiableDAO.getInstance().save(parentContainer);
		}

		log.info("Table added and saved to repository.");

		return v;
	}

	/**
	 * @see com.nextep.designer.ui.model.ITypedObjectUIController#initializeNavigator(java.lang.Object)
	 */
	public INavigatorConnector initializeNavigator(Object model) {
		return new TableNavigator((IBasicTable) model, this);
	}

	@Override
	public String getEditorId() {
		return TypedFormRCPEditor.EDITOR_ID;
	}
}
